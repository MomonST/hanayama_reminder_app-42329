<!DOCTYPE html>
<html lang="ja">
  <head>
    <title>花山リマインダー - 見頃の花を見逃さない</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="あなたの行きたいエリアの高山植物の開花時期を事前にお知らせ。忙しい日常でも、最高のタイミングで山の花に出会えます。">
    <meta name="keywords" content="花,山,登山,高山植物,開花,通知,リマインダー">
    
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    
    <link rel="icon" type="image/svg+xml" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>🌸</text></svg>">
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    
    <%= javascript_importmap_tags %>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eOzrKbFN/LA" crossorigin="anonymous"></script>
    
    <% if content_for?(:use_Maps) %>
      <script>
        // @map_data が定義されていて、かつ空でない場合のみ window.mapData を設定する
        <% if defined?(@map_data) && @map_data.present? %>
          window.mapData = <%= raw @map_data.to_json %>;
        <% else %>
          window.mapData = []; // データがない場合は空の配列を設定する
        <% end %>
      </script>
      <script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['Maps_API_KEY'] %>&callback=initMap&libraries=places" async defer>
      </script>
    <% end %>
    
  </head>

  <body class="min-vh-100 d-flex flex-column gradient-bg">
    <% unless user_signed_in? %>
      <%= render 'shared/notification_popup' %>
    <% end %>
    
    <%= render 'shared/login_prompt_modal' %>
    
    <header class="bg-white bg-opacity-90 shadow-sm border-bottom border-green-100">
      <div class="container-fluid px-4 px-sm-6 px-lg-8 mx-auto" style="max-width: 1280px;">
        <div class="d-flex justify-content-between align-items-center" style="height: 64px;">
          <div class="d-flex align-items-center me-2">
            <i class="bi bi-mountain fs-3 text-success"></i>
            <h1 class="fs-4 fw-bold ms-2 text-gradient">
              花山リマインダー
            </h1>
          </div>
          <div class="d-flex align-items-center ms-3">
            <%= link_to new_post_path, class: "btn btn-sm btn-gradient-pink me-2", data: { bs_toggle: "modal", bs_target: "#loginPromptModal", user_logged_in: user_signed_in?.to_s } do %>
              <i class="bi bi-upload me-1"></i>
              リアルタイム投稿
            <% end %>
            
            <% if user_signed_in? %>
              <%= link_to notifications_path, class: "btn btn-link text-dark p-1 me-1" do %>
                <i class="bi bi-bell fs-5"></i>
              <% end %>
              <%= link_to destroy_user_session_path, data: { turbo_method: :delete }, class: "btn btn-link text-dark p-1" do %>
                ログアウト
              <% end %>
            <% else %>
              <%= link_to new_user_session_path, class: "btn btn-link text-dark p-1 me-1", data: { bs_toggle: "modal", bs_target: "#loginPromptModal" } do %>
                ログイン
              <% end %>
              <%= link_to new_user_registration_path, class: "btn btn-sm btn-success" do %>
                新規登録
              <% end %>
            <% end %>
          </div>
        </div>
      </div>
    </header>

    <div id="alert-container" class="position-fixed top-0 end-0 p-3" style="z-index: 1055;"></div>
    
    <% if notice %>
      <div class="alert alert-success alert-dismissible fade show m-3" role="alert">
        <i class="bi bi-check-circle me-2"></i>
        <%= notice %>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    <% end %>
    
    <% if alert %>
      <div class="alert alert-danger alert-dismissible fade show m-3" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i>
        <%= alert %>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    <% end %>
    
    <main class="container-fluid px-3 px-md-4 py-4 flex-grow-1" style="max-width: 1280px;">
      <%= yield %>
    </main>
    
    <footer class="bg-dark text-white py-4 mt-auto">
      <div class="container text-center">
        <p>&copy; 2024 花山リマインダー. All rights reserved.</p>
      </div>
    </footer>
    
    <button id="page-top" class="btn btn-success position-fixed bottom-0 end-0 m-4 rounded-circle d-none" style="width: 50px; height: 50px; z-index: 1000;" onclick="smoothScrollTo('body')">
      <i class="bi bi-arrow-up"></i>
    </button>
    
    <script>
      // smoothScrollTo 関数はそのまま残します
      function smoothScrollTo(targetId) {
        const targetElement = document.querySelector(targetId);
        if (targetElement) {
          window.scrollTo({
            top: targetElement.offsetTop,
            behavior: 'smooth'
          });
        }
      }

      // グローバル変数 HanayamaReminder の初期化は一度だけ
      window.HanayamaReminder = window.HanayamaReminder || { map: null, markers: [] };

      // ページトップボタンの表示制御
      window.addEventListener('scroll', function() {
        const pageTop = document.getElementById('page-top');
        if (pageTop) { 
          if (window.scrollY > 300) {
            pageTop.classList.remove('d-none');
          } else {
            pageTop.classList.add('d-none');
          }
        }
      });
      
      // InfoWindow のコンテンツ作成 (initMapとaddMarkersToMapの前に定義が必要)
      function createInfoWindowContent(location) {
        return `
          <div style="padding: 10px; max-width: 250px; font-family: 'Helvetica Neue', Arial, sans-serif;">
            <h5 style="margin: 0 0 8px 0; color: #1f2937; font-weight: 600;">${location.name}</h5>
            <p style="margin: 4px 0; color: #6b7280; font-size: 14px;">
              <strong>🌸 花:</strong> ${location.flower}
            </p>
            <p style="margin: 4px 0; color: #6b7280; font-size: 14px;">
              <strong>📍 難易度:</strong> ${location.difficulty || '未設定'}
            </p>
            ${location.days_left ? `
              <p style="margin: 4px 0; color: #22c55e; font-size: 14px; font-weight: 600;">
                <strong>⏰ 見頃まで:</strong> あと${location.days_left}日
              </p>
            ` : ''}
            <div style="margin-top: 12px;">
              <a href="/flower_mountains/${location.id}" 
                 style="background: linear-gradient(135deg, #22c55e, #16a34a); 
                        color: white; 
                        padding: 6px 12px; 
                        border-radius: 6px; 
                        text-decoration: none; 
                        font-size: 13px; 
                        font-weight: 500;">
                詳細を見る
              </a>
            </div>
          </div>
        `;
      }

      // マーカーを地図に追加 (initMapの前に定義が必要)
      function addMarkersToMap(locations) {
        // 既存のマーカーをマップから削除し、配列をクリア
        if (window.HanayamaReminder.markers) { // 存在チェック
          window.HanayamaReminder.markers.forEach(m => m.marker.setMap(null)); // 修正: m.marker にアクセス
        }
        window.HanayamaReminder.markers = []; // 新しい配列で初期化
        
        const bounds = new google.maps.LatLngBounds();
        
        locations.forEach(location => {
          if (location.lat && location.lng) {
            const marker = new google.maps.Marker({
              position: { lat: parseFloat(location.lat), lng: parseFloat(location.lng) },
              map: HanayamaReminder.map,
              title: location.name,
              icon: {
                url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
                  <svg width="32" height="32" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="16" cy="16" r="12" fill="#22c55e" stroke="#fff" stroke-width="2"/>
                    <text x="16" y="20" text-anchor="middle" fill="white" font-size="16">🌸</text>
                  </svg>
                `),
                scaledSize: new google.maps.Size(32, 32)
              }
            });
            
            const infoWindow = new google.maps.InfoWindow({
              content: createInfoWindowContent(location)
            });
            
            marker.addListener('click', () => {
              // 他のInfoWindowを閉じる
              HanayamaReminder.markers.forEach(m => {
                if (m.infoWindow) m.infoWindow.close();
              });
              
              infoWindow.open(HanayamaReminder.map, marker);
            });
            // HanayamaReminder.markers にマーカーとInfoWindowをセットで保存
            HanayamaReminder.markers.push({ marker: marker, infoWindow: infoWindow });
            bounds.extend(marker.getPosition());
          }
        });
        
        if (HanayamaReminder.markers.length > 0) {
          HanayamaReminder.map.fitBounds(bounds);
          google.maps.event.addListenerOnce(HanayamaReminder.map, 'bounds_changed', () => {
            if (HanayamaReminder.map.getZoom() > 12) {
              HanayamaReminder.map.setZoom(12);
            }
          });
        }
      }

      // 地図初期化（Google Maps APIのコールバックとして呼び出される）
      window.initMap = function() {
        const mapElement = document.getElementById('map');
        if (!mapElement) {
          // map要素が存在しない場合は何もしない（例：地図のないページ）
          // 既存のマップインスタンスが存在する場合、それを破棄するロジックが必要であればここに追加
          if (window.HanayamaReminder && window.HanayamaReminder.map) {
            // HanayamaReminder.map.setMap(null); // 地図要素がなくなったらマップを破棄
            // HanayamaReminder.map = null;
          }
          return;
        }

        // ページをロードするたびに新しいマップ要素が生成される場合、既存のマップインスタンスを再利用するか、破棄して再作成する
        // 既存のマップインスタンスが存在し、かつ新しいマップ要素に紐付いていない場合は破棄
        if (window.HanayamaReminder && window.HanayamaReminder.map && 
          window.HanayamaReminder.map.getDiv() !== mapElement) {
          window.HanayamaReminder.map = null; // 古いマップインスタンスを破棄
        }

        // mapがまだ初期化されていないか、または新しいmap要素に初期化する必要がある場合
        if (!window.HanayamaReminder.map || window.HanayamaReminder.map.getDiv() !== mapElement) {
          const center = { lat: 36.2048, lng: 138.2529 }; 
          window.HanayamaReminder.map = new google.maps.Map(mapElement, {
            zoom: 6,
            center: center,
            styles: [
              {
                featureType: 'all',
                elementType: 'geometry.fill',
                stylers: [{ color: '#f0f9ff' }]
              },
              {
                featureType: 'water',
                elementType: 'geometry',
                stylers: [{ color: '#a7c6ed' }]
              }
            ]
          });
        }
        
        // マーカーの追加は、マップが初期化された後に行う
        if (window.HanayamaReminder.map && window.mapData && window.mapData.length > 0) {
          addMarkersToMap(window.mapData);
        }
      }; 
      // TurboDriveのページ読み込み完了イベントでinitMapを呼び出す
      document.addEventListener('turbo:load', function() {
        // initMapがGoogle Maps APIのcallbackで呼び出されるより後に実行される可能性があるため、
        // ある程度の遅延を持たせるか、initMap内で複数回の初期化を安全に処理するロジックを実装する
        // ここでは、Google Maps APIが確実に読み込まれていることを前提とする
        if (typeof google === 'object' && typeof google.maps === 'object') {
          initMap();
        }
      });
      // ログイン促進モーダルを制御するJavaScript (application.jsには移動させない)
      document.addEventListener('DOMContentLoaded', () => {
        const loginPromptModal = new bootstrap.Modal(document.getElementById('loginPromptModal'));

        // リアルタイム投稿ボタンのイベントリスナー
        document.querySelectorAll('.btn-gradient-pink').forEach(button => {
          button.addEventListener('click', (event) => {
            const userLoggedIn = event.currentTarget.dataset.userLoggedIn === 'true';
            if (!userLoggedIn) {
              event.preventDefault(); // リンクのデフォルト動作を停止
              loginPromptModal.show();
            }
            // else {
            //   // ログイン済みの場合は、リアルタイム投稿画面への遷移を許可
            //   // このボタンがフォームやAjaxリクエストで投稿するのではなく、
            //   // 画面遷移を目的としている場合は、リンクのhrefを適切に設定する
            // }
          });
        });

        // ログインボタンのイベントリスナー (ヘッダーの「ログイン」ボタン)
        document.querySelectorAll('a[href="/users/sign_in"]').forEach(link => {
          link.addEventListener('click', (event) => {
            event.preventDefault(); // デフォルトのログインページへの遷移を防ぐ
            loginPromptModal.show(); // モーダルを表示
          });
        });

        // モーダル内の「新規登録」ボタンのイベントリスナー
        document.getElementById('modalSignUpButton').addEventListener('click', () => {
          window.location.href = '/users/sign_up';
        });

        // モーダル内の「ログイン」ボタンのイベントリスナー
        document.getElementById('modalLoginButton').addEventListener('click', () => {
          window.location.href = '/users/sign_in';
        });
      });
    </script>
  </body>
</html>